#!/bin/bash

# This script is used to create new release from master on github
# Usage: bash create_release <version> 
# version: semver format (v1.0.0) or incremental version (major|minor|patch)

source ./install_gh

function is_valid_version() {
    local version=$1
    local fixed_version_regex="^[0-9]+\.[0-9]+\.[0-9]+$";
    local incremental_version_regex="major|minor|patch";

    local regex="^($fixed_version_regex|$incremental_version_regex)$"

    if [[ $1 =~ $regex ]]; then
        return 0
    else
        return 1
    fi
}

function create_release() {
    local version=$1    

    # if version is not valid, it will not create new release
    if ! is_valid_version $version; then
        echo "Invalid version format. Please use semver format"
        exit
    fi

    yarn config set version-git-message "Bump version to v%s"

    echo "Creating new release..."
    yarn version --new-version $1 2>error_create_release.txt

    if [ $? -ne 0 ]; then
        echo "Failed to create new release"
        cat error_create_release.txt
        rm error_create_release.txt
        exit
    fi

    rm error_create_release.txt

    new_version=$(git describe --tags)

    git push origin master $new_version

    if [ $? -ne 0 ]; then
        echo "Failed to push to remote"
        exit
    fi

    gh release create $new_version --generate-notes --verify-tag --draft --target master
}

# check release version is provided
if [ -z "$1" ]; then
    echo "Please provide release version"
    echo "Usage: bash create_release <version>"
    exit
fi

# check gh is installed
if ! command -v gh &> /dev/null
then
    install_gh
fi

# check yarn is installed
if ! command -v yarn &> /dev/null
then
    echo "Please install yarn"
    exit
fi

# check user has logged in
if ! gh auth status &> /dev/null
then
    echo -e "\e[1;35mPlease login to github\e[0m"
    gh auth login --web && echo -e "\e[1;32mLogin success\e[0m"
fi

current_version=$(git describe --tags 2>/dev/null)

gh_flags="--json isDraft --json url --json tagName"
release_data=$(gh release view $current_version $gh_flags 2>/dev/null) 
isDraft=$(echo $release_data | grep "\"isDraft\":true")

# when current version is still draft, it will not create new release
if [ $isDraft ]; then
    draft_version=$(gh release view $current_version $gh_flags)
    
    echo -e "Current version is draft, can't create new release\n"
    echo -e "$draft_version\n"
else 
    create_release $@
fi